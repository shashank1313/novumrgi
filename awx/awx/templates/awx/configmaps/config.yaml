apiVersion: v1
kind: Secret
metadata:
  name: {{ include "awx.fullname" . }}-config
  labels:
    {{- include "awx.labels" . | nindent 4 }}
type: Opaque
stringData:
  {{ include "awx.fullname" . }}_nginx_conf: |
    #user awx;

    worker_processes  1;

    pid        /tmp/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        server_tokens off;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /dev/stdout main;

        map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
        }

        sendfile        on;
        #tcp_nopush     on;
        #gzip  on;

        upstream uwsgi {
            server 127.0.0.1:8050;
            }

        upstream daphne {
            server 127.0.0.1:8051;
        }

        server {
            listen 8052 default_server;

            # If you have a domain name, this is where to add it
            server_name _;
            keepalive_timeout 65;

            # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
            add_header Strict-Transport-Security max-age=15768000;
            add_header Content-Security-Policy "default-src 'self'; connect-src 'self' ws: wss:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' *.pendo.io; img-src 'self' *.pendo.io data:; report-uri /csp-violation/";
            add_header X-Content-Security-Policy "default-src 'self'; connect-src 'self' ws: wss:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' *.pendo.io; img-src 'self' *.pendo.io data:; report-uri /csp-violation/";

            # Protect against click-jacking https://www.owasp.org/index.php/Testing_for_Clickjacking_(OTG-CLIENT-009)
            add_header X-Frame-Options "DENY";

            location /nginx_status {
              stub_status on;
              access_log off;
              allow 127.0.0.1;
              deny all;
            }

            location /static/ {
                alias /var/lib/awx/public/static/;
            }

            location /favicon.ico { alias /var/lib/awx/public/static/favicon.ico; }

            location /websocket {
                # Pass request to the upstream alias
                proxy_pass http://daphne;
                # Require http version 1.1 to allow for upgrade requests
                proxy_http_version 1.1;
                # We want proxy_buffering off for proxying to websockets.
                proxy_buffering off;
                # http://en.wikipedia.org/wiki/X-Forwarded-For
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                # enable this if you use HTTPS:
                proxy_set_header X-Forwarded-Proto https;
                # pass the Host: header from the client for the sake of redirects
                proxy_set_header Host $http_host;
                # We've set the Host header, so we don't need Nginx to muddle
                # about with redirects
                proxy_redirect off;
                # Depending on the request value, set the Upgrade and
                # connection headers
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
            }

            location / {
                # Add trailing / if missing
                rewrite ^(.*)$http_host(.*[^/])$ $1$http_host$2/ permanent;
                uwsgi_read_timeout 120s;
                uwsgi_pass uwsgi;
                include /etc/nginx/uwsgi_params;
                proxy_set_header X-Forwarded-Port 443;
                uwsgi_param HTTP_X_FORWARDED_PORT 443;
            }
        }
    }

  {{ include "awx.fullname" . }}_settings: |
    import os
    import socket
    from django_auth_ldap.config import LDAPSearch
    ADMINS = ()

    AWX_PROOT_ENABLED = True

    # Automatically deprovision pods that go offline
    AWX_AUTO_DEPROVISION_INSTANCES = True

    SYSTEM_TASK_ABS_CPU = {{  .Values.resources.task.requests.cpu | replace "m" "" | div 1000 | mul 4 | int }}
    SYSTEM_TASK_ABS_MEM = {{ .Values.resources.task.requests.memory | replace "Mi" "" | div 100 | int }}

    INSIGHTS_URL_BASE = {{ .Values.awx.insights.urlBase | quote | default "" }}
    INSIGHTS_AGENT_MIME = {{ .Values.awx.insights.agentMime | quote | default "" }}
    AUTOMATION_ANALYTICS_URL = {{ .Values.awx.insights.automationAnalyticsUrl | quote | default "" }}

    #Autoprovisioning should replace this
    CLUSTER_HOST_ID = socket.gethostname()
    SYSTEM_UUID = os.environ.get('MY_POD_UID', '00000000-0000-0000-0000-000000000000')

    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

    REMOTE_HOST_HEADERS = ['HTTP_X_FORWARDED_FOR']

    STATIC_ROOT = '/var/lib/awx/public/static'
    PROJECTS_ROOT = '/var/lib/awx/projects'
    AWX_ANSIBLE_COLLECTIONS_PATHS = '/var/lib/awx/vendor/awx_ansible_collections'
    JOBOUTPUT_ROOT = '/var/lib/awx/job_status'
    SECRET_KEY = open('/etc/tower/SECRET_KEY', 'rb').read().strip()
    ALLOWED_HOSTS = ['*']

    {{- range $index, $value := .Values.awx.ldap }}

    {{- $prefix := ternary "" (printf "%d_" $index) (eq $index 0) -}}

    {{- if $value.enabled }}
    AUTH_LDAP_{{ $prefix }}SERVER_URI = {{ $value.host | quote }}
    AUTH_LDAP_{{ $prefix }}BIND_DN = {{ $value.bindDn | quote }}
    AUTH_LDAP_{{ $prefix }}BIND_PASSWORD = {{ $value.bindPassword | quote }}
    {{- if $value.subTree }}
    AUTH_LDAP_{{ $prefix }}USER_SEARCH_SUBTREE = True
    {{- else }}
    AUTH_LDAP_{{ $prefix }}USER_SEARCH_SUBTREE = False
    {{- end }}

    AUTH_LDAP_{{ $prefix }}USER_SEARCH = {{ if $value.userSearch -}} LDAPSearch(
      {{- range $i, $search := $value.userSearch -}}
      {{- if $i -}},{{- end }}
      {{ . | quote | indent 6 }}
      {{- end }}
    )
    {{- else -}}
    None
    {{- end }}

    AUTH_LDAP_{{ $prefix }}GROUP_SEARCH = {{ if $value.groupSearch -}} LDAPSearch(
      {{- range $i, $search := $value.groupSearch -}}
      {{- if $i -}},{{- end }}
      {{ . | quote | indent 6 }}
      {{- end }}
    )
    {{- else -}}
    None
    {{- end }}

    AUTH_LDAP_{{ $prefix }}USER_DN_TEMPLATE = {{ $value.userDnTemplate | quote | default "None" }}
    {{- if $value.tls }}
    AUTH_LDAP_{{ $prefix }}START_TLS = True
    {{- else }}
    AUTH_LDAP_{{ $prefix }}START_TLS = False
    {{- end }}
    AUTH_LDAP_{{ $prefix }}DENY_GROUP = {{ $value.denyGroup | quote | default "None" }}
    AUTH_LDAP_{{ $prefix }}REQUIRE_GROUP = {{ $value.requireGroup | quote | default "None" }}
    AUTH_LDAP_{{ $prefix }}USER_ATTR_MAP = {{ $value.userAttributeMap | default "None" | indent 6 | trim  }}
    AUTH_LDAP_{{ $prefix }}GROUP_TYPE_PARAMS = {{ $value.groupTypeParams | default "None" | indent 6 | trim  }}
    AUTH_LDAP_{{ $prefix }}USER_FLAGS_BY_GROUP = {{ $value.flagsByGroup | default "None" | indent 6 | trim  }} 
    AUTH_LDAP_{{ $prefix }}ORGANIZATION_MAP = {{ $value.orgMap | default "None" | indent 6 | trim  }} 
    AUTH_LDAP_{{ $prefix }}TEAM_MAP = {{ $value.teamMap | default "None" | indent 6 | trim }}
    {{- end }}
    {{- end }}

    LOGGING['handlers']['console'] = {
        '()': 'logging.StreamHandler',
        'level': 'DEBUG',
        'formatter': 'simple',
    }

    LOGGING['loggers']['django.request']['handlers'] = ['console']
    LOGGING['loggers']['rest_framework.request']['handlers'] = ['console']
    LOGGING['loggers']['awx']['handlers'] = ['console', 'external_logger']
    LOGGING['loggers']['awx.main.commands.run_callback_receiver']['handlers'] = ['console']
    LOGGING['loggers']['awx.main.commands.inventory_import']['handlers'] = ['console']
    LOGGING['loggers']['awx.main.tasks']['handlers'] = ['console', 'external_logger']
    LOGGING['loggers']['awx.main.scheduler']['handlers'] = ['console', 'external_logger']
    LOGGING['loggers']['django_auth_ldap']['handlers'] = ['console']
    LOGGING['loggers']['social']['handlers'] = ['console']
    LOGGING['loggers']['system_tracking_migrations']['handlers'] = ['console']
    LOGGING['loggers']['rbac_migrations']['handlers'] = ['console']
    LOGGING['loggers']['awx.isolated.manager.playbooks']['handlers'] = ['console']
    LOGGING['handlers']['callback_receiver'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['fact_receiver'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['task_system'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['tower_warnings'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['rbac_migrations'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['system_tracking_migrations'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['management_playbooks'] = {'class': 'logging.NullHandler'}

    USE_X_FORWARDED_PORT = True

    AWX_CONTAINER_GROUP_DEFAULT_IMAGE = {{ .Values.awx.containerGroupDefaultImage | quote }}

    {{- if hasKey .Values.awx.candlePin "host" }}
    REDHAT_CANDLEPIN_HOST = "{{ .Values.awx.candlePin.host }}"
    {{- end }}
    {{- if hasKey .Values.awx.candlePin "verify" }}
    REDHAT_CANDLEPIN_VERIFY = "{{ .Values.awx.candlePin.verify }}"
    {{- end }}

    BROADCAST_WEBSOCKET_PORT = 8052
    BROADCAST_WEBSOCKET_PROTOCOL = 'http'

  {{ include "awx.fullname" . }}_redis_conf: |
    unixsocket /var/run/redis/redis.sock
    unixsocketperm 660
    port 0
    bind 127.0.0.1
